{"kind":"Notebook","sha256":"25b40ffc2a188b9628f810e06e94746bbc5b7d22f6633e5f4d5ca77ed9723cb3","slug":"baltrad-parallel-processing","location":"/notebooks/baltrad/baltrad_short_course/3_BALTRAD_parallel_processing.ipynb","dependencies":[],"frontmatter":{"title":"Parallel processing","content_includes_title":false,"kernelspec":{"name":"conda-env-xradar-py","language":"python","display_name":"Python [conda env:xradar]"},"authors":[{"nameParsed":{"literal":"Alfonso Ladino","given":"Alfonso","family":"Ladino"},"name":"Alfonso Ladino","orcid":"0000-0001-8081-7827","github":"aladinor","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Anna del Moral Méndez","given":"Anna","non_dropping_particle":"del","family":"Moral Méndez"},"name":"Anna del Moral Méndez","orcid":"0000-0002-5015-840X","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Brenda Javornik","given":"Brenda","family":"Javornik"},"name":"Brenda Javornik","github":"leavesntwigs","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Daniel Michelson","given":"Daniel","family":"Michelson"},"name":"Daniel Michelson","orcid":"0000-0003-3222-9881","github":"DanielMichelson","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Daniel Wolfensberger","given":"Daniel","family":"Wolfensberger"},"name":"Daniel Wolfensberger","github":"wolfidan","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Gionata Ghiggi","given":"Gionata","family":"Ghiggi"},"name":"Gionata Ghiggi","orcid":"0000-0002-0818-0865","github":"ghiggi","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Jen DeHart","given":"Jen","family":"DeHart"},"name":"Jen DeHart","orcid":"0000-0001-8536-4927","github":"jcdehart","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Jordi Figueras i Ventura","given":"Jordi Figueras","non_dropping_particle":"i","family":"Ventura"},"name":"Jordi Figueras i Ventura","orcid":"0000-0002-4949-422X","github":"jfigui","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Julian Giles","given":"Julian","family":"Giles"},"name":"Julian Giles","orcid":"0000-0001-8134-008X","github":"JulianGiles","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Kai Mühlbauer","given":"Kai","family":"Mühlbauer"},"name":"Kai Mühlbauer","orcid":"0000-0001-6599-1034","github":"kmuehlbauer","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Maxwell Grover","given":"Maxwell","family":"Grover"},"name":"Maxwell Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Mike Dixon","given":"Mike","family":"Dixon"},"name":"Mike Dixon","orcid":"0000-0002-9597-9113","github":"mike-dixon","id":"contributors-myst-generated-uid-11"},{"nameParsed":{"literal":"Robert Jackson","given":"Robert","family":"Jackson"},"name":"Robert Jackson","orcid":"0000-0003-2518-1234","github":"rcjackson","id":"contributors-myst-generated-uid-12"},{"nameParsed":{"literal":"Scott Collis","given":"Scott","family":"Collis"},"name":"Scott Collis","orcid":"0000-0002-2303-687X","github":"scollis","id":"contributors-myst-generated-uid-13"},{"nameParsed":{"literal":"Ting-Yu Cha","given":"Ting-Yu","family":"Cha"},"name":"Ting-Yu Cha","orcid":"0000-0002-6292-8483","github":"tingyucha","id":"contributors-myst-generated-uid-14"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","name":"Apache License 2.0","osi":true,"free":true,"url":"https://opensource.org/licenses/Apache-2.0"},"code":{"id":"CC-BY-4.0","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true,"url":"https://creativecommons.org/licenses/by/4.0/"}},"github":"https://github.com/openradar/erad2024","copyright":"2024","abbreviations":{"ARM":"Atmospheric Radiation Measurement","NCAR":"National Center for Atmospheric Research"},"exports":[{"format":"ipynb","filename":"3_BALTRAD_parallel_processing.ipynb","url":"/erad2024/_preview/65/build/3_BALTRAD_parallel_p-8f18eae96478b540573988859c97aed9.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The default VM setup is to use a single CPU core. In order to demonstrate the power of parallel processing, you must first determine whether your physical hardware has more than a single core.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ktfEotpJP9"}],"key":"M6i9GGHFxS"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"On Linux this is done in the terminal with the ‘nproc’ command.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dZzWvKx6ga"}],"key":"Y5cHoecmXE"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"On Mac this is done in the terminal with the ‘sysctl -n hw.ncpu’ command.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jVe38tdfDB"}],"key":"X4mZVtUYsH"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"On Windows this is done graphically using the Task Manager’s Performance tab.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"pVMN5SlIIB"}],"key":"qgnXpxBV5S"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"We want tune our VM to harness the power of several CPUs. Follow the following steps:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"hkda1dLN7r"}],"key":"XaOz7IJDxm"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Shut down the IPython notebook Server (Ctrl-C, answer yes)","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"aatL7Fe3hf"}],"key":"gnpOeytGMn"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Shutdown the VM (click the X button in the VM window, choose power down the machine)","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"DldF8g7v5S"}],"key":"N3X91oR7W5"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Select the VM in the VirtualBox Manager Window, from the menu choose Machine->Setting","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"TvEFri01oJ"}],"key":"kKHe68XV8w"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Choose the System Tab, then Processor, use the slider to set the number of Processor to 2, 4, or 8 depending on your system resources.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"fbFDioMGHa"}],"key":"ZgLrso0ogr"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Click Ok, and then start the machine","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"oAI1FNrfrY"}],"key":"zejshOXqPz"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Login, use the start_notebook.sh script to start the IPython server, start the notebook and you should have multiple processors!","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"GhOj8152DB"}],"key":"gneBkOkjqG"}],"key":"FRvSdsOYrn"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"RELOAD THIS PAGE!","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"OH5ptIRFC8"}],"key":"cBYX7QqscO"}],"key":"IdkCrOluIp"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"retrieve data from s3 bucket","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tTyTrMQA10"}],"identifier":"retrieve-data-from-s3-bucket","label":"retrieve data from s3 bucket","html_id":"retrieve-data-from-s3-bucket","implicit":true,"key":"mLLTyq9ZD0"}],"key":"wdUQvlDyPu"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-08-13T15:03:09.080776Z","iopub.status.busy":"2024-08-13T15:03:09.080417Z","iopub.status.idle":"2024-08-13T15:03:11.989500Z","shell.execute_reply":"2024-08-13T15:03:11.988914Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport urllib.request\nfrom pathlib import Path\n# Set the URL for the cloud\nURL = \"https://js2.jetstream-cloud.org:8001/\"\npath = \"pythia/radar/erad2024/baltrad/baltrad_short_course/\"\n!mkdir -p data\nfiles = [\"seang.h5\",\n \"searl.h5\",\n \"sease.h5\",\n \"sehud.h5\",\n \"sekir.h5\",\n \"sekkr.h5\",\n \"selek.h5\",\n \"selul.h5\",\n \"seosu.h5\",\n \"sevar.h5\",\n \"sevil.h5\"]\nfor file in files:\n    file0 = os.path.join(path, file)\n    name = os.path.join(\"data\", Path(file).name)\n    if not os.path.exists(name):\n        print(f\"downloading, {name}\")\n        urllib.request.urlretrieve(f\"{URL}{file0}\", os.path.join(\"data\", Path(file).name))","key":"g10H8KtUQw"},{"type":"output","id":"qwjdNMeZc1Ss9FdyCPdsP","data":[{"name":"stdout","output_type":"stream","text":"downloading, data/seang.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/searl.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/sease.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/sehud.h5\ndownloading, data/sekkr.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/selek.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/selul.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/seosu.h5\ndownloading, data/sevar.h5\n"},{"name":"stdout","output_type":"stream","text":"downloading, data/sevil.h5\n"}],"key":"UpP9ZrZu3b"}],"key":"LUP6I2XiZV"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Verify from Python the number of CPU cores at our disposal","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oCHDXaI0CW"}],"identifier":"verify-from-python-the-number-of-cpu-cores-at-our-disposal","label":"Verify from Python the number of CPU cores at our disposal","html_id":"verify-from-python-the-number-of-cpu-cores-at-our-disposal","implicit":true,"key":"nAXrFm7VL4"}],"key":"MHoNFCGB0Y"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-08-13T15:03:11.991978Z","iopub.status.busy":"2024-08-13T15:03:11.991800Z","iopub.status.idle":"2024-08-13T15:03:11.997195Z","shell.execute_reply":"2024-08-13T15:03:11.996711Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"import multiprocessing\nprint(\"We have %i cores to play with!\" % multiprocessing.cpu_count())","key":"WhGXscfbp6"},{"type":"output","id":"gnc66K4t4mh32Y-eAfU-3","data":[{"name":"stdout","output_type":"stream","text":"We have 4 cores to play with!\n"}],"key":"s1Ut7GA3yI"}],"key":"HyUIrZk6uf"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Yay! Now we’re going to set up some rudimentary functionality that will allow us to distribute a processing load among our cores.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pdQdpoOWKV"}],"key":"wBz5WGq4qK"}],"key":"FG4ufdIB8C"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define a generator","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CdAOyuS9ib"}],"identifier":"define-a-generator","label":"Define a generator","html_id":"define-a-generator","implicit":true,"key":"OHITB1qhQH"}],"key":"mZXoYVkkTW"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-08-13T15:03:11.999420Z","iopub.status.busy":"2024-08-13T15:03:11.999263Z","iopub.status.idle":"2024-08-13T15:03:12.088767Z","shell.execute_reply":"2024-08-13T15:03:12.088201Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport _raveio, odc_polarQC\n\n# Specify the processing chain\nodc_polarQC.algorithm_ids = [\"ropo\", \"beamb\", \"radvol-att\", \"radvol-broad\", \"rave-overshooting\", \"qi-total\"]\n\n# Run processing chain on a single file. Return an output file string.\ndef generate(file_string):\n    rio = _raveio.open(file_string)\n\n    pvol = rio.object\n    pvol = odc_polarQC.QC(pvol)\n    rio.object = pvol\n    \n    # Derive an output file name\n    path, fstr = os.path.split(file_string)\n    ofstr = os.path.join(path, 'qc_'+fstr)\n    \n    rio.save(ofstr)\n    return ofstr","key":"k64rdzgiGa"},{"type":"output","id":"oVAemZZ7CvdZ5CZMWjjdN","data":[],"key":"ePD4sqsEfB"}],"key":"A5l7cGFyv9"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Feed the generator, sequentially","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dKuCnegOxP"}],"identifier":"feed-the-generator-sequentially","label":"Feed the generator, sequentially","html_id":"feed-the-generator-sequentially","implicit":true,"key":"VBgf52P6TV"}],"key":"aLiQI6W8FF"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-08-13T15:03:12.091660Z","iopub.status.busy":"2024-08-13T15:03:12.091078Z","iopub.status.idle":"2024-08-13T15:04:04.218590Z","shell.execute_reply":"2024-08-13T15:04:04.217994Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"import glob, time\n\nifstrs = glob.glob(\"data/se*.h5\")\nbefore = time.time()\nfor fstr in ifstrs:\n    print(fstr, generate(fstr))\nafter = time.time()\n\nprint(\"Processing time: %3.2f seconds\" % (after-before))","key":"FsRj3l6Tf8"},{"type":"output","id":"XxDfKe9miEE9VxMCmx00q","data":[{"name":"stdout","output_type":"stream","text":"data/sease.h5 data/qc_sease.h5\n"},{"name":"stdout","output_type":"stream","text":"data/sehud.h5 data/qc_sehud.h5\n"},{"name":"stdout","output_type":"stream","text":"data/searl.h5 data/qc_searl.h5\n"},{"name":"stdout","output_type":"stream","text":"data/sevar.h5 data/qc_sevar.h5\n"},{"name":"stdout","output_type":"stream","text":"data/sevil.h5 data/qc_sevil.h5\n"},{"name":"stdout","output_type":"stream","text":"data/selul.h5 data/qc_selul.h5\n"},{"name":"stdout","output_type":"stream","text":"data/seang.h5 data/qc_seang.h5\n"},{"name":"stdout","output_type":"stream","text":"data/sekkr.h5 data/qc_sekkr.h5\n"},{"name":"stdout","output_type":"stream","text":"data/seosu.h5 data/qc_seosu.h5\n"},{"name":"stdout","output_type":"stream","text":"data/sekir.h5 data/qc_sekir.h5\n"},{"name":"stdout","output_type":"stream","text":"data/selek.h5 data/qc_selek.h5\nProcessing time: 52.12 seconds\n"}],"key":"hUKzR334Z6"}],"key":"Q1pJNEQU4b"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mental note: repeat once!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EEG1bBxOhS"}],"key":"XgnOVcsQOQ"}],"key":"Vr9bwwlzHi"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Multiprocess the generator","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ogoqaueiY3"}],"identifier":"multiprocess-the-generator","label":"Multiprocess the generator","html_id":"multiprocess-the-generator","implicit":true,"key":"QVyO2QM2kO"}],"key":"OQWRfXWL3h"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-08-13T15:04:04.220799Z","iopub.status.busy":"2024-08-13T15:04:04.220596Z","iopub.status.idle":"2024-08-13T15:04:04.224270Z","shell.execute_reply":"2024-08-13T15:04:04.223471Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Both input and output are a list of file strings\ndef multi_generate(fstrs, procs=None):\n    pool = multiprocessing.Pool(procs)  # Pool of processors. Defaults to all available logical cores\n\n    results = []\n    # chunksize=1 means feed a process a new job as soon as the process is idle.\n    # In our case, this restricts the queue to one \"dispatcher\" which is faster.\n    r = pool.map_async(generate, fstrs, chunksize=1, callback=results.append)\n    r.wait()\n\n    return results[0]","key":"B56wSah65R"},{"type":"output","id":"X4o4S0oXJlMPcCtcDRroR","data":[],"key":"CBAPKYOgZ8"}],"key":"bABHXHV1jW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Feed the monster, asynchronously!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pkvq7blcG1"}],"identifier":"feed-the-monster-asynchronously","label":"Feed the monster, asynchronously!","html_id":"feed-the-monster-asynchronously","implicit":true,"key":"dMXuF99NZ4"}],"key":"FRQzYDzwt3"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-08-13T15:04:04.226379Z","iopub.status.busy":"2024-08-13T15:04:04.226186Z","iopub.status.idle":"2024-08-13T15:04:07.351002Z","shell.execute_reply":"2024-08-13T15:04:07.350266Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"before = time.time()\nofstrs = multi_generate(ifstrs)\nafter = time.time()\n\nprint(\"Processing time: %3.2f seconds\" % (after-before))","key":"ZMagW6eg6W"},{"type":"output","id":"_7HDD8SVHgjjOCSDD15pK","data":[{"name":"stdout","output_type":"stream","text":"Processing time: 3.12 seconds\n"}],"key":"tsL7Gn9YSK"}],"key":"XvjPsjyCgS"}],"key":"AmuOo4nFm9"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Quality Control using DR","url":"/baltrad-drqc","group":"BALTRAD"},"next":{"title":"Compositing","url":"/baltrad-compositing","group":"BALTRAD"}}},"domain":"http://localhost:3000"}