{"kind":"Notebook","sha256":"611696c9cdc8a251f2b9e085383416c5097b693cab4ea280b9f056e9b1d99f10","slug":"baltrad-parallel-processing","location":"/notebooks/baltrad/baltrad_short_course/BALTRAD_parallel_processing.ipynb","dependencies":[],"frontmatter":{"title":"BALTRAD parallel processing","content_includes_title":false,"kernelspec":{"name":"python3","language":"python","display_name":"Python 3"},"authors":[{"nameParsed":{"literal":"Alfonso Ladino","given":"Alfonso","family":"Ladino"},"name":"Alfonso Ladino","orcid":"0000-0001-8081-7827","github":"aladinor","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Anna del Moral Méndez","given":"Anna","non_dropping_particle":"del","family":"Moral Méndez"},"name":"Anna del Moral Méndez","orcid":"0000-0002-5015-840X","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Brenda Javornik","given":"Brenda","family":"Javornik"},"name":"Brenda Javornik","github":"leavesntwigs","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Daniel Michelson","given":"Daniel","family":"Michelson"},"name":"Daniel Michelson","orcid":"0000-0003-3222-9881","github":"DanielMichelson","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Daniel Wolfensberger","given":"Daniel","family":"Wolfensberger"},"name":"Daniel Wolfensberger","github":"wolfidan","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Gionata Ghiggi","given":"Gionata","family":"Ghiggi"},"name":"Gionata Ghiggi","orcid":"0000-0002-0818-0865","github":"ghiggi","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Jen DeHart","given":"Jen","family":"DeHart"},"name":"Jen DeHart","orcid":"0000-0001-8536-4927","github":"jcdehart","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Jordi Figueras i Ventura","given":"Jordi Figueras","non_dropping_particle":"i","family":"Ventura"},"name":"Jordi Figueras i Ventura","orcid":"0000-0002-4949-422X","github":"jfigui","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Julian Giles","given":"Julian","family":"Giles"},"name":"Julian Giles","orcid":"0000-0001-8134-008X","github":"JulianGiles","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Kai Mühlbauer","given":"Kai","family":"Mühlbauer"},"name":"Kai Mühlbauer","orcid":"0000-0001-6599-1034","github":"kmuehlbauer","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Maxwell Grover","given":"Maxwell","family":"Grover"},"name":"Maxwell Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Mike Dixon","given":"Mike","family":"Dixon"},"name":"Mike Dixon","orcid":"0000-0002-9597-9113","github":"mike-dixon","id":"contributors-myst-generated-uid-11"},{"nameParsed":{"literal":"Robert Jackson","given":"Robert","family":"Jackson"},"name":"Robert Jackson","orcid":"0000-0003-2518-1234","github":"rcjackson","id":"contributors-myst-generated-uid-12"},{"nameParsed":{"literal":"Scott Collis","given":"Scott","family":"Collis"},"name":"Scott Collis","orcid":"0000-0002-2303-687X","github":"scollis","id":"contributors-myst-generated-uid-13"},{"nameParsed":{"literal":"Ting-Yu Cha","given":"Ting-Yu","family":"Cha"},"name":"Ting-Yu Cha","orcid":"0000-0002-6292-8483","github":"tingyucha","id":"contributors-myst-generated-uid-14"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","name":"Apache License 2.0","osi":true,"free":true,"url":"https://opensource.org/licenses/Apache-2.0"},"code":{"id":"CC-BY-4.0","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true,"url":"https://creativecommons.org/licenses/by/4.0/"}},"github":"https://github.com/openradar/erad2024","copyright":"2024","abbreviations":{"ARM":"Atmospheric Radiation Measurement","NCAR":"National Center for Atmospheric Research"},"exports":[{"format":"ipynb","filename":"BALTRAD_parallel_processing.ipynb","url":"/erad2024/_preview/65/build/BALTRAD_parallel_pro-124d7e9807fb2812f3dae49ec1b613af.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The default VM setup is to use a single CPU core. In order to demonstrate the power of parallel processing, you must first determine whether your physical hardware has more than a single core.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QAqg9lp5iB"}],"key":"A9d5zJZySr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"On Linux this is done in the terminal with the ‘nproc’ command.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OL5NZDTdi5"}],"key":"QsFoJLRYf2"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"On Mac this is done in the terminal with the ‘sysctl -n hw.ncpu’ command.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"s79NCkY3tl"}],"key":"opja2xNFSW"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"On Windows this is done graphically using the Task Manager’s Performance tab.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qodWReFZWx"}],"key":"rKaPmqLzA2"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"We want tune our VM to harness the power of several CPUs. Follow the following steps:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Dq9EC4sPcf"}],"key":"ilLKXhmcPc"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Shut down the IPython notebook Server (Ctrl-C, answer yes)","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"H9vZNxaGDT"}],"key":"dQ78bVWJzC"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Shutdown the VM (click the X button in the VM window, choose power down the machine)","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"nOdHklVew8"}],"key":"C5nUTaOkXL"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Select the VM in the VirtualBox Manager Window, from the menu choose Machine->Setting","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"csYl8fxzua"}],"key":"prHLksawEy"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Choose the System Tab, then Processor, use the slider to set the number of Processor to 2, 4, or 8 depending on your system resources.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"gobsV88zAH"}],"key":"hUz5woG4vE"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Click Ok, and then start the machine","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"KALnkfcM64"}],"key":"O2Mmh1mXfB"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Login, use the start_notebook.sh script to start the IPython server, start the notebook and you should have multiple processors!","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"KotN6UPtQE"}],"key":"RTIcBHTtYG"}],"key":"LFAKfthVx5"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"RELOAD THIS PAGE!","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"CD14xYxxf1"}],"key":"z08cJASBwP"}],"key":"DZ5Yp6RZX9"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Verify from Python the number of CPU cores at our disposal","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NHR2IvaXQs"}],"identifier":"verify-from-python-the-number-of-cpu-cores-at-our-disposal","label":"Verify from Python the number of CPU cores at our disposal","html_id":"verify-from-python-the-number-of-cpu-cores-at-our-disposal","implicit":true,"key":"Hb5FjlzQCW"}],"key":"rOIsFGHgYJ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import multiprocessing\nprint(\"We have %i cores to play with!\" % multiprocessing.cpu_count())","key":"mOr3lH6h01"},{"type":"output","id":"we5tsmak7Xgq5cdfSgKY1","data":[{"name":"stdout","output_type":"stream","text":"We have 16 cores to play with!\n"}],"key":"rTzn9mlCNq"}],"key":"Z3DeRfRHu4"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Yay! Now we’re going to set up some rudimentary functionality that will allow us to distribute a processing load among our cores.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"doSqupDEMD"}],"key":"pBB3CWI3RG"}],"key":"d8bOq5rsF4"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define a generator","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Cz6UIJzQxb"}],"identifier":"define-a-generator","label":"Define a generator","html_id":"define-a-generator","implicit":true,"key":"Le4xHQc3KE"}],"key":"dyJ6TaEzd4"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport _raveio, odc_polarQC\n\n# Specify the processing chain\nodc_polarQC.algorithm_ids = [\"ropo\", \"beamb\", \"radvol-att\", \"radvol-broad\", \"rave-overshooting\", \"qi-total\"]\n\n# Run processing chain on a single file. Return an output file string.\ndef generate(file_string):\n    rio = _raveio.open(file_string)\n\n    pvol = rio.object\n    pvol = odc_polarQC.QC(pvol)\n    rio.object = pvol\n    \n    # Derive an output file name\n    path, fstr = os.path.split(file_string)\n    ofstr = os.path.join(path, 'qc_'+fstr)\n    \n    rio.save(ofstr)\n    return ofstr","key":"oDMkzfo9Ow"},{"type":"output","id":"7zjyNMptyuAfgHhXATzpM","data":[],"key":"Gt7TdF6SpP"}],"key":"pz7HQA767p"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Feed the generator, sequentially","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IkjZ14S5oT"}],"identifier":"feed-the-generator-sequentially","label":"Feed the generator, sequentially","html_id":"feed-the-generator-sequentially","implicit":true,"key":"Oj2BnwYoLX"}],"key":"pAKdaYyi35"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"import glob, time\n\nifstrs = glob.glob(\"data/se*.h5\")\nbefore = time.time()\nfor fstr in ifstrs:\n    print(fstr, generate(fstr))\nafter = time.time()\n\nprint(\"Processing time: %3.2f seconds\" % (after-before))","key":"eM9f37wOGG"},{"type":"output","id":"BArSMGcziqgx2imIrbd6q","data":[{"name":"stdout","output_type":"stream","text":"data/sevil.h5 data/qc_sevil.h5\ndata/seang.h5 data/qc_seang.h5\ndata/selek.h5 data/qc_selek.h5\ndata/sease.h5 data/qc_sease.h5\ndata/sekkr.h5 data/qc_sekkr.h5\ndata/seosu.h5 data/qc_seosu.h5\ndata/selul.h5 data/qc_selul.h5\ndata/sehud.h5 data/qc_sehud.h5\ndata/sekir.h5 data/qc_sekir.h5\ndata/searl.h5 data/qc_searl.h5\ndata/sevar.h5 data/qc_sevar.h5\nProcessing time: 6.11 seconds\n"}],"key":"iiOLNq6E6v"}],"key":"GBRv0daSc3"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mental note: repeat once!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SGGUFeGg8v"}],"key":"mxSVWXOfh3"}],"key":"KMLF87iK6D"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Multiprocess the generator","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GsNeYk2vCg"}],"identifier":"multiprocess-the-generator","label":"Multiprocess the generator","html_id":"multiprocess-the-generator","implicit":true,"key":"CNyB9YPSzx"}],"key":"EEsmgoDAy0"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Both input and output are a list of file strings\ndef multi_generate(fstrs, procs=None):\n    pool = multiprocessing.Pool(procs)  # Pool of processors. Defaults to all available logical cores\n\n    results = []\n    # chunksize=1 means feed a process a new job as soon as the process is idle.\n    # In our case, this restricts the queue to one \"dispatcher\" which is faster.\n    r = pool.map_async(generate, fstrs, chunksize=1, callback=results.append)\n    r.wait()\n\n    return results[0]","key":"Dpmk4YYbkS"},{"type":"output","id":"GmR8SVYHeKCky_m4kOSye","data":[],"key":"lTb2NNjjpy"}],"key":"Rg0IcNfKNq"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Feed the monster, asynchronously!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uGDiQBQhHv"}],"identifier":"feed-the-monster-asynchronously","label":"Feed the monster, asynchronously!","html_id":"feed-the-monster-asynchronously","implicit":true,"key":"HmnHDM0fCQ"}],"key":"vbjO1Wd5Jj"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"before = time.time()\nofstrs = multi_generate(ifstrs)\nafter = time.time()\n\nprint(\"Processing time: %3.2f seconds\" % (after-before))","key":"syX4qDQsRD"},{"type":"output","id":"p8DTiCSt8NN1BM_KmVW4w","data":[{"name":"stdout","output_type":"stream","text":"Processing time: 0.75 seconds\n"}],"key":"dnoW9fArbF"}],"key":"b6LjCzKa2p"}],"key":"FGq8Kpz8Ii"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"BALTRAD I/O model - making sense out of data and metadata","url":"/baltrad-io","group":"BALTRAD"},"next":{"title":"BALTRAD Quality Control","url":"/baltrad-qc","group":"BALTRAD"}}},"domain":"http://localhost:3000"}